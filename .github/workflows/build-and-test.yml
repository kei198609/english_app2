on:
  push:
    branches:
      - master
env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY_BACKEND_NGINX: myapp-prod-nginx
  ECR_REPOSITORY_BACKEND_RAILS: myapp-prod-back
  ECR_REPOSITORY_FRONTEND: myapp-prod-front
  ECS_TASK_DEFINITION_BACKEND: myapp-prod-task-back
  ECS_TASK_DEFINITION_FRONTEND: myapp-prod-task-front
  CONTAINER_NAME_BACKEND_NGINX: myapp-prod-container-nginx
  CONTAINER_NAME_BACKEND_RAILS: myapp-prod-container-back
  CONTAINER_NAME_FRONTEND: myapp-prod-container-front
  ECS_SERVICE_BACKEND: myapp-prod-service-rails-alb
  ECS_SERVICE_FRONTEND: myapp-prod-service-frontend-alb
  ECS_CLUSTER: myapp-prod-ecs-cluster
  IMAGE_TAG: ${{ github.sha }}

jobs:
  # rspec:
  #   name: RSpec Tests
  #   runs-on: ubuntu-latest

  #   services:
  #     mysql:
  #       image: mysql:8.0.31
  #       ports:
  #         - 3306:3306
  #       env:
  #         MYSQL_ALLOW_EMPTY_PASSWORD: yes
  #       options: --health-cmd "mysqladmin ping" --health-interval 10s --health-timeout 5s --health-retries 10

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Set up Ruby
  #       uses: ruby/setup-ruby@v1
  #       with:
  #         ruby-version: 3.1.3
  #         bundler-cache: true

  #     - name: Set up Node.js (for Rails assets)
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: '14'

  #     - name: Install dependencies
  #       run: bundle install
  #       working-directory: api

  #     - name: DB migration
  #       run: |
  #         cp config/database.yml.ci config/database.yml
  #         bundle exec rails db:create RAILS_ENV=test
  #         bundle exec rails db:migrate RAILS_ENV=test
  #       working-directory: api

  #     - name: Run rspec
  #       run: bundle exec rspec
  #       working-directory: api

# ECR deploy
  # Nginx
  deploy_ecr_backend_nginx:
    # needs: [rspec]
    name: deploy_ecr_backend_nginx
    runs-on: ubuntu-latest
    environment: production
    outputs:
      backend-nginx-image: ${{ steps.build-image.outputs.image }}
    defaults:
      run:
        working-directory: api
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: login ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: build,tag and push docker image ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} #ECRのレジストリのURI
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_BACKEND_NGINX }} #ビルドするイメージが格納されるECRのリポジトリ名
        run: |
          docker build \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }} \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            -f nginx/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REPOSITORY:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT
  # Rails
  deploy_ecr_backend_rails:
    # needs: [rspec]
    name: deploy_ecr_backend_rails
    runs-on: ubuntu-latest
    environment: production
    outputs:
      backend-rails-image: ${{ steps.build-image.outputs.image }}
    defaults:
      run:
        working-directory: api
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: login ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: build,tag and push docker image ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} #ECRのレジストリのURI
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_BACKEND_RAILS }}
        run: |
          docker build \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }} \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            -f Dockerfile.prod .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REPOSITORY:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT
  # Frontend
  deploy_ecr_frontend:
    # needs: [rspec]
    name: deploy_ecr_frontend
    runs-on: ubuntu-latest
    environment: production
    outputs:
      frontend-image: ${{ steps.build-image.outputs.image }}
    defaults:
      run:
        working-directory: front
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: login ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: build,tag and push docker image ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }} #ECRのレジストリのURI
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_FRONTEND }}
        run: |
          docker build \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }} \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            -f Dockerfile.prod .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REPOSITORY:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT
# ECS update
  ecs_update_backend:
    needs: [deploy_ecr_backend_nginx, deploy_ecr_backend_rails, deploy_ecr_frontend]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: login ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: download task definition
        run: |
          aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION_BACKEND --query taskDefinition > task-definition-backend.json
        # コンテナ1 (Rails)
      - name: render ecs task definition for first container (Rails)
        id: render-container-backend-rails
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-backend.json
          container-name: ${{ env.CONTAINER_NAME_BACKEND_RAILS }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ needs.deploy_ecr_backend_rails.outputs.backend-rails-image }}
        # コンテナ2 (Nginx)
      - name: render ecs task definition for second container (Nginx)
        id: render-container-backend-nginx
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-container-backend-rails.outputs.task-definition }}
          container-name: ${{ env.CONTAINER_NAME_BACKEND_NGINX }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ needs.deploy_ecr_backend_nginx.outputs.backend-nginx-image }}

      - name: Deploy ECS task backend
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-container-backend-rails.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_BACKEND }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  ecs_update_frontend:
    needs: [deploy_ecr_backend_nginx,deploy_ecr_backend_rails, deploy_ecr_frontend]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: login ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: download task definition
        run: |
          aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION_FRONTEND --query taskDefinition > task-definition-frontend.json

      - name: render ecs task definition for frontend container
        id: render-container-frontend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-frontend.json
          container-name: ${{ env.CONTAINER_NAME_FRONTEND }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ needs.deploy_ecr_frontend.outputs.frontend-image }}

      - name: Deploy ECS task frontend
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-container-frontend.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_FRONTEND }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true